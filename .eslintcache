[{"C:\\Users\\ryan\\Documents\\cryptocurrency-price-tracker\\src\\index.js":"1","C:\\Users\\ryan\\Documents\\cryptocurrency-price-tracker\\src\\App.js":"2","C:\\Users\\ryan\\Documents\\cryptocurrency-price-tracker\\src\\Currency.js":"3","C:\\Users\\ryan\\Documents\\cryptocurrency-price-tracker\\src\\CurrencyDetails.js":"4"},{"size":198,"mtime":1610449974041,"results":"5","hashOfConfig":"6"},{"size":7825,"mtime":1610799093878,"results":"7","hashOfConfig":"6"},{"size":1738,"mtime":1610799223552,"results":"8","hashOfConfig":"6"},{"size":11240,"mtime":1610862771625,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1noeoww",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ryan\\Documents\\cryptocurrency-price-tracker\\src\\index.js",[],["19","20"],"C:\\Users\\ryan\\Documents\\cryptocurrency-price-tracker\\src\\App.js",[],"C:\\Users\\ryan\\Documents\\cryptocurrency-price-tracker\\src\\Currency.js",[],"C:\\Users\\ryan\\Documents\\cryptocurrency-price-tracker\\src\\CurrencyDetails.js",["21"],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":23,"column":22,"nodeType":"28","endLine":23,"endColumn":32},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"react-hooks/exhaustive-deps","Assignments to the 'individual' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-global-assign","no-unsafe-negation"]